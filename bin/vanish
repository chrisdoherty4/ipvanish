#!/usr/bin/env python3
import sys
import os

try:
    from vanish.application import Vanish
except ModuleNotFoundError:
    # TODO: Fix this
    sys.path.append(os.path.abspath(os.path.join('.')))
    from vanish.application import Vanish

from argparse import ArgumentParser, RawTextHelpFormatter

# TODO: Move this to a more approriate module.


class ConsoleApplication(object):
    """
    Defines the arguments that can be parsed by the vanish application.
    """

    def __init__(self, app):
        self._app = app
        self._parser = ArgumentParser(
            "vanish",
            formatter_class=RawTextHelpFormatter,
            description='Vanish is a tool that helps users on linux connect to IPVanish VPN servers.')

        self._command_parser = self._parser.add_subparsers(dest='command')

        self._addList()
        self._addConnect()
        self._addConfigsUpdate()
        self._addServerUpdate()
        self._addPingServer()

    def run(self, args=None):
        arguments = vars(self._parser.parse_args(args))
        if 'subcommand' in arguments:
            command = "{}.{}".format(arguments['command'],
                                     arguments['subcommand'])
            del arguments['subcommand']
        else:
            command = arguments['command']

        del arguments['command']

        return self._app.run(command, arguments)

    def _addPingServer(self):
        ping = self._command_parser.add_parser(
            'ping', help='Ping IPVanish servers.')

        filter_group = ping.add_argument_group('filters')
        self._addAllServerFilters(filter_group)

    def _addConfigsUpdate(self):
        self._command_parser.add_parser(
            'update-configs', help="Update the OpenVPN configuration files.")

    def _addServerUpdate(self):
        self._command_parser.add_parser(
            'update-servers', help="Update server listing information.")

    def _addConnect(self):
        connect_parser = self._command_parser.add_parser(
            'connect',
            help='Connect to an IPVanish server'
            )

        connect_parser.add_argument(
            '--server',
            metavar="SERVER",
            default=None,
            )

        connect_parser.add_argument(
            '--auth-user-pass',
            default=None,
            help="A credentials file with username and password for openvpn"
            )

        filter_group = connect_parser.add_argument_group('filters')
        self._addAllServerFilters(filter_group)

    def _addList(self):
        list_parser = self._command_parser.add_parser(
            'list',
            help='Retrieve server locations or generate a full server list'
            )

        list_parser.add_argument(
            'subcommand',
            metavar='SUBCOMMAND',
            nargs='?',
            default='servers',
            choices=['servers', 'continents', 'countries', 'regions', 'cities'])

        filter_group = list_parser.add_argument_group('filters')
        self._addAllServerFilters(filter_group)

    def _addContinentsFilter(self, parser):
        parser.add_argument(
            '--continent',
            action='append',
            dest='continents',
            metavar='CONTINENT'
            )

    def _addCountriesFilter(self, parser):
        parser.add_argument(
            '--country',
            action='append',
            dest='countries',
            metavar='COUNTRY'
            )

    def _addRegionsFilter(self, parser):
        parser.add_argument(
            '--region',
            action='append',
            dest='regions',
            metavar='REGION'
            )

    def _addCitiesFilter(self, parser):
        parser.add_argument(
            '--city',
            action='append',
            dest='cities',
            metavar='CITY'
            )

    def _addAllServerFilters(self, parser):
        self._addContinentsFilter(parser)
        self._addCountriesFilter(parser)
        self._addRegionsFilter(parser)
        self._addCitiesFilter(parser)


if __name__ == "__main__":
    console = ConsoleApplication(Vanish())
    console.run()
